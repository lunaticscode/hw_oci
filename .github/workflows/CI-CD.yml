# .github/workflows/CI-CD.yml
name: CI-CD # Github Action 페이지 좌측 리스트에 표시될 이름
on: [push] # Push 이벤트가 발생한 경우에 실행, 응용하면 특정 브랜치나 버전 태그 생성 이벤트도 등록 가능

env:
  DOCKER_IMAGE: ghcr.io/lunaticscode/hw_oci # ghcr에 업로드될 이미지 이름, format: ghcr.io/깃허브유저이름/이미지이름

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04 # Github의 러너를 사용
    steps:
      # Checkout Repository
      - uses: actions/checkout@v2.1.0

      # 크로스플랫폼 빌드 지원을 위해 추가
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to ghcr
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 사용자 깃허브 아이디
          password: ${{ secrets.GHCR_PW }} # Settings > Secrets > Actions 의 GHCR_PAT 값을 불러옴

      # Build and Push
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true # ghcr에 push
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.run_id }},${{ env.DOCKER_IMAGE }}:latest # 이미지 버전 [이미지 고유 아이디, latest]
          platforms: linux/arm64,linux/amd64 # OCI A1 인스턴스는 arm 기반이기 때문에 arm 플랫폼 빌드가 필요

  deploy:
    name: Deploy
    environment: deployment # Github Environment에 정의된 환경변수셋을 이용
    runs-on: [self-hosted, hw_oci_runner] # 미리 생성한 Runner에 접속, 직접 만든 러너 중 OCI_runner 이라는 라벨이 붙은 러너를 사용
    needs: build # 선행 Build job이 끝난 후에 실행
    steps:
      # Checkout Repository
      - uses: actions/checkout@v2.1.0

      # Create Environment File
      - name: Create .env file
        run: | # Github Environment로 지정한 값들을 .env 파일에 저장
          jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' <<< "$SECRETS_CONTEXT" > .env
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      # Login to ghcr
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # 사용자 깃허브 아이디
          password: ${{ secrets.GHCR_PW }} # Settings > Secrets > Actions 의 GHCR_PAT 값을 불러옴

      # Pull Image
      - name: Pull Docker Image
        run: docker pull ${{ env.DOCKER_IMAGE }} # build job에서 빌드한 이미지를 불러오기

      # Deploy
      - name: Run Docker Compose
        run: docker-compose up -d --force-recreate # --force-recreate 인자를 통해 항상 컨테이너를 재생성하기 (.env 같은 compose 외부 요소의 변경을 반영)
